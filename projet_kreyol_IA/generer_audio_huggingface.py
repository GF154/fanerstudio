#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
G√©n√©rateur d'Audiobook avec Hugging Face TTS - Pwoj√® Krey√≤l IA
Utilise facebook/mms-tts-hat pour une vraie voix cr√©ole ha√Øtienne
"""

import sys
from pathlib import Path
import torch
from transformers import VitsModel, AutoTokenizer
import numpy as np
from tqdm import tqdm
import scipy.io.wavfile as wavfile

def generer_audio_creole(texte, chemin_sortie, model_name="facebook/mms-tts-hat"):
    """
    G√©n√©rer un fichier audio avec une vraie voix cr√©ole ha√Øtienne
    
    Args:
        texte: Le texte cr√©ole √† synth√©tiser
        chemin_sortie: Chemin du fichier MP3 de sortie
        model_name: Mod√®le Hugging Face √† utiliser
    """
    print(f"\nüéß G√©n√©ration de l'audiobook avec voix cr√©ole native...")
    print(f"   Mod√®le: {model_name}")
    print(f"   Texte: {len(texte)} caract√®res")
    print(f"   Sortie: {chemin_sortie}")
    print()
    
    try:
        # Cr√©er le dossier de sortie
        chemin_sortie.parent.mkdir(parents=True, exist_ok=True)
        
        # Charger le mod√®le et le tokenizer
        print("üì• Chargement du mod√®le TTS cr√©ole ha√Øtien...")
        with tqdm(total=100, desc="Pr√©paration", unit="%") as pbar:
            pbar.update(20)
            
            try:
                model = VitsModel.from_pretrained(model_name)
                tokenizer = AutoTokenizer.from_pretrained(model_name)
                pbar.update(40)
            except Exception as e:
                print(f"\n‚ö†Ô∏è  Le mod√®le {model_name} n'est pas disponible.")
                print(f"   Erreur: {e}")
                print(f"\nüí° Utilisation du fallback avec gTTS...")
                return generer_audio_gtts_fallback(texte, chemin_sortie)
        
        print("‚úÖ Mod√®le charg√©!")
        print()
        
        # Diviser le texte en phrases pour √©viter les timeouts
        phrases = texte.split('.')
        phrases = [p.strip() + '.' for p in phrases if p.strip()]
        
        print(f"üìù Traitement de {len(phrases)} phrase(s)...")
        print()
        
        # G√©n√©rer l'audio phrase par phrase
        tous_les_audios = []
        
        with tqdm(total=len(phrases), desc="Synth√®se vocale", unit="phrase") as pbar:
            for phrase in phrases:
                # Nettoyer et valider la phrase
                phrase_clean = phrase.strip()
                
                # Ignorer les phrases trop courtes ou vides
                if len(phrase_clean) < 3:
                    pbar.update(1)
                    continue
                
                try:
                    # Tokenizer la phrase
                    inputs = tokenizer(phrase_clean, return_tensors="pt")
                    
                    # V√©rifier que l'input n'est pas vide
                    if inputs['input_ids'].shape[1] == 0:
                        print(f"\n‚ö†Ô∏è  Phrase ignor√©e (tokenization vide): {phrase_clean[:50]}...")
                        pbar.update(1)
                        continue
                    
                    # G√©n√©rer l'audio
                    with torch.no_grad():
                        output = model(**inputs).waveform
                    
                    # V√©rifier que l'output n'est pas vide
                    if output.numel() == 0:
                        print(f"\n‚ö†Ô∏è  Phrase ignor√©e (output vide): {phrase_clean[:50]}...")
                        pbar.update(1)
                        continue
                    
                    # Convertir en numpy
                    audio_np = output.squeeze().cpu().numpy()
                    tous_les_audios.append(audio_np)
                    
                except Exception as e:
                    print(f"\n‚ö†Ô∏è  Erreur sur phrase: {str(e)[:100]}")
                    print(f"    Phrase: {phrase_clean[:50]}...")
                    pbar.update(1)
                    continue
                
                pbar.update(1)
        
        if not tous_les_audios:
            print("‚ùå Aucun audio g√©n√©r√©")
            return False
        
        print()
        print("üîó Assemblage des segments audio...")
        
        # Concat√©ner tous les segments
        audio_complet = np.concatenate(tous_les_audios)
        
        # Normaliser l'audio (entre -1 et 1)
        audio_complet = audio_complet / np.max(np.abs(audio_complet))
        
        # Convertir en int16 pour WAV
        audio_int16 = (audio_complet * 32767).astype(np.int16)
        
        # Sauvegarder en WAV avec scipy
        wav_path = chemin_sortie.with_suffix('.wav')
        wavfile.write(
            str(wav_path),
            rate=model.config.sampling_rate,
            data=audio_int16
        )
        
        print(f"‚úÖ Fichier WAV cr√©√©: {wav_path}")
        
        # Essayer de convertir en MP3 si ffmpeg est disponible
        try:
            import subprocess
            mp3_path = chemin_sortie.with_suffix('.mp3')
            subprocess.run([
                'ffmpeg', '-i', str(wav_path),
                '-codec:a', 'libmp3lame', '-qscale:a', '2',
                str(mp3_path), '-y'
            ], check=True, capture_output=True)
            print(f"‚úÖ Fichier MP3 cr√©√©: {mp3_path}")
            
            # Supprimer le WAV si MP3 r√©ussi
            wav_path.unlink()
            chemin_final = mp3_path
        except:
            print("‚ÑπÔ∏è  FFmpeg non disponible, fichier sauvegard√© en WAV")
            chemin_final = wav_path
        
        # Statistiques
        duree = len(audio_complet) / model.config.sampling_rate
        taille_ko = chemin_final.stat().st_size / 1024
        
        print()
        print(f"‚úÖ Audiobook cr√©√© avec succ√®s!")
        print(f"   Fichier: {chemin_final}")
        print(f"   Taille: {taille_ko:.2f} Ko")
        print(f"   Dur√©e: {duree:.1f} secondes (~{duree/60:.1f} minutes)")
        print(f"   Qualit√©: Voix cr√©ole ha√Øtienne native üá≠üáπ")
        
        return True
    
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la g√©n√©ration: {e}")
        print("\nüí° Tentative avec fallback gTTS...")
        return generer_audio_gtts_fallback(texte, chemin_sortie)


def generer_audio_gtts_fallback(texte, chemin_sortie):
    """Fallback avec gTTS si Hugging Face ne fonctionne pas"""
    print("\nüîÑ Utilisation de gTTS comme solution de repli...")
    
    try:
        from gtts import gTTS
        
        # G√©n√©rer avec gTTS (fran√ßais pour prononcer le cr√©ole)
        tts = gTTS(text=texte, lang='fr', slow=False)
        tts.save(str(chemin_sortie))
        
        taille_ko = chemin_sortie.stat().st_size / 1024
        print(f"‚úÖ Audio cr√©√© avec gTTS: {taille_ko:.2f} Ko")
        print("   Note: Prononciation avec accent fran√ßais")
        
        return True
    
    except Exception as e:
        print(f"‚ùå Erreur gTTS: {e}")
        return False


def lire_fichier_texte(chemin):
    """Lire un fichier texte"""
    try:
        with open(chemin, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        print(f"‚ùå Erreur de lecture: {e}")
        return None


def main():
    """Fonction principale"""
    print("="*60)
    print("üá≠üáπ G√âN√âRATEUR D'AUDIOBOOK CR√âOLE HA√èTIEN")
    print("   avec Voix Native Hugging Face")
    print("="*60)
    print()
    
    # V√©rifier les arguments
    if len(sys.argv) < 2:
        print("Usage: python generer_audio_huggingface.py <fichier_kreyol.txt>")
        print()
        print("Exemple:")
        print("  python generer_audio_huggingface.py output/test_document/test_document_kreyol.txt")
        return 1
    
    fichier_texte = Path(sys.argv[1])
    
    # V√©rifier que le fichier existe
    if not fichier_texte.exists():
        print(f"‚ùå Fichier introuvable: {fichier_texte}")
        return 1
    
    print(f"üìñ Fichier source: {fichier_texte.name}")
    
    # Lire le texte
    print(f"üìÑ Lecture du texte cr√©ole...")
    texte = lire_fichier_texte(fichier_texte)
    
    if not texte:
        return 1
    
    print(f"‚úÖ Texte charg√©: {len(texte)} caract√®res")
    
    # G√©n√©rer le chemin de sortie
    nom_base = fichier_texte.stem.replace('_kreyol', '')
    dossier_sortie = fichier_texte.parent
    audio_path = dossier_sortie / f"{nom_base}_audio_hf.mp3"
    
    # G√©n√©rer l'audio
    if not generer_audio_creole(texte, audio_path):
        return 1
    
    # R√©sum√© final
    print("\n" + "="*60)
    print("‚úÖ AUDIOBOOK CR√â√â AVEC SUCC√àS!")
    print("="*60)
    print(f"üéß Fichier audio: {audio_path}")
    print()
    print("üí° Pour √©couter:")
    print(f"   - Double-cliquez sur le fichier")
    print(f"   - Ou utilisez: {audio_path}")
    print("="*60)
    
    return 0


if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  G√©n√©ration interrompue")
        sys.exit(130)
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

