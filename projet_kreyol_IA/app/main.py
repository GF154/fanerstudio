#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üá≠üáπ Krey√≤l IA - Main Application (Version 4.0)
Pwen antre prensipal pou aplikasyon an
"""

import uvicorn
from pathlib import Path
import sys

def main():
    """Lance aplikasyon an"""
    print("=" * 80)
    print("üá≠üáπ KREY√íL IA - STUDIO PWOFESYON√àL (VERSION 4.0)")
    print("=" * 80)
    print("üåê Platf√≤m Kreyasyon Kontni an Krey√≤l Ayisyen")
    print("=" * 80)
    print()
    print("üì± INTERFACE:")
    print("   Web Interface:  http://localhost:8000")
    print("   API Docs:       http://localhost:8000/docs")
    print("   ReDoc:          http://localhost:8000/redoc")
    print()
    print("üöÄ NOUVO FONKSYONALITE (v4.0):")
    print("   ‚úÖ Background Jobs (Celery + Redis)")
    print("   ‚úÖ Redis Cache (100x faster)")
    print("   ‚úÖ JWT Authentication")
    print("   ‚úÖ Rate Limiting")
    print("   ‚úÖ WebSocket Real-time Progress")
    print("   ‚úÖ Streaming TTS")
    print()
    print("üîó NOUVO ENDPOINTS:")
    print("   POST   /api/auth/login - Login")
    print("   POST   /api/audiobook/async - Background audiobook")
    print("   GET    /api/tasks/{id} - Task status")
    print("   WS     /ws/tasks/{id} - Real-time progress")
    print("   POST   /api/translate/cached - Cached translation")
    print("   POST   /api/tts/streaming - Streaming audio")
    print()
    print("üí° DEMO USER:")
    print("   Email: demo@kreyolia.ht")
    print("   Password: demo123")
    print()
    print("‚ö†Ô∏è  N√íTE:")
    print("   ‚Ä¢ Redis dwe ap kouri pou cache/celery (optional)")
    print("   ‚Ä¢ Celery worker dwe ap kouri pou background jobs (optional)")
    print("   ‚Ä¢ Si yo pa disponib, sist√®m la ap itilize fallback")
    print()
    print("=" * 80)
    print()
    
    # Check if Redis is available
    try:
        from app.cache_redis import translation_cache
        if translation_cache.available:
            print("‚úÖ Redis: Connected")
        else:
            print("‚ö†Ô∏è  Redis: Not available (using memory fallback)")
    except Exception as e:
        print(f"‚ö†Ô∏è  Redis: {e}")
    
    # Check if Celery is available
    try:
        from app.tasks import celery_app
        print("‚úÖ Celery: Configured")
        print("   To start worker: celery -A app.tasks worker --loglevel=info --pool=solo")
    except Exception as e:
        print(f"‚ö†Ô∏è  Celery: {e}")
    
    print()
    print("=" * 80)
    print("üöÄ STARTING SERVER...")
    print("=" * 80)
    print()
    
    # Setup enhanced routes
    try:
        # Import from current directory
        import sys
        from pathlib import Path
        
        # Add project root to path
        project_root = Path(__file__).parent.parent
        if str(project_root) not in sys.path:
            sys.path.insert(0, str(project_root))
        
        # Now import
        from app.api import app
        
        # Try to load enhanced features
        try:
            from app.api_enhanced import setup_enhanced_routes
            setup_enhanced_routes(app)
            print("‚úÖ Enhanced routes loaded!")
        except Exception as e:
            print(f"‚ö†Ô∏è  Enhanced routes not available: {e}")
        
        # Try to load video/AI features
        try:
            from app.api_video import setup_video_ai_routes
            setup_video_ai_routes(app)
            print("‚úÖ Video & AI routes loaded!")
        except Exception as e:
            print(f"‚ö†Ô∏è  Video & AI routes not available: {e}")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Error loading routes: {e}")
        print("   Running with basic features only")
        import traceback
        traceback.print_exc()
    
    # Lance serv√® a
    uvicorn.run(
        "app.api:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        reload_dirs=["app"],
        log_level="info"
    )

if __name__ == "__main__":
    main()

